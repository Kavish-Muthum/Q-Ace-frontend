---
import Sidebar from '../components/Sidebar.astro';
import Header from '../components/Header.astro';

const { title = 'Recording' } = Astro.props;
---

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} | SaaS Platform</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>
<body class="bg-gray-100 min-h-screen flex">
    <Sidebar />
    
    <main class="flex-grow bg-white ml-64 p-8">
        <Header title={title} />
        
        <div class="mt-8">
            <slot />
            
            <div class="space-y-4">
                <video id="preview" autoplay muted class="w-full max-w-lg border border-gray-300 rounded-lg"></video>
                <div class="space-x-2">
                    <button id="startRecord" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">Start Recording</button>
                    <button id="stopRecord" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded" disabled>Stop Recording</button>
                </div>
                <video id="recorded" controls class="w-full max-w-lg border border-gray-300 rounded-lg"></video>
                <a id="downloadLink" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded inline-block" style="display: none;">Download Video</a>
            </div>
        </div>
    </main>

    <script>
        let mediaRecorder;
        let recordedChunks = [];

        const startRecordButton = document.getElementById('startRecord');
        const stopRecordButton = document.getElementById('stopRecord');
        const previewVideo = document.getElementById('preview');
        const recordedVideo = document.getElementById('recorded');
        const downloadLink = document.getElementById('downloadLink');

        startRecordButton.addEventListener('click', startRecording);
        stopRecordButton.addEventListener('click', stopRecording);

        async function startRecording() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                previewVideo.srcObject = stream;
                
                mediaRecorder = new MediaRecorder(stream);
                
                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        recordedChunks.push(event.data);
                    }
                };
                
                mediaRecorder.start();
                startRecordButton.disabled = true;
                stopRecordButton.disabled = false;
            } catch (error) {
                console.error("Error accessing media devices:", error);
                alert("Failed to access camera and microphone. Please ensure you've granted the necessary permissions.");
            }
        }

        function stopRecording() {
            mediaRecorder.stop();
            startRecordButton.disabled = false;
            stopRecordButton.disabled = true;
            
            mediaRecorder.onstop = () => {
                const blob = new Blob(recordedChunks, { type: 'video/webm' });
                recordedVideo.src = URL.createObjectURL(blob);
                downloadLink.href = recordedVideo.src;
                downloadLink.download = 'recorded_video.webm';
                downloadLink.style.display = 'inline-block';
                recordedChunks = [];
            };
        }
    </script>
</body>
</html>