---
import Sidebar from '../components/Sidebar.astro';
import Header from '../components/Header.astro';

const { title = 'Recording' } = Astro.props;
---

<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title} | SaaS Platform</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        #preview {
            transform: scaleX(-1);
        }
        .recording-indicator {
            color: red;
            font-weight: bold;
            position: absolute;
            top: 10px;
            right: 10px;
            display: none;
        }
        .speech-bubble {
            position: relative;
            background-color: #f8f8f8;
            border-radius: 10px;
            padding: 15px;
            margin-top: 20px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            width: 300px;
        }
        .speech-bubble::before {
            content: '';
            position: absolute;
            left: -20px;
            top: 50%;
            border-width: 10px 20px 10px 0;
            border-style: solid;
            border-color: transparent #f8f8f8 transparent transparent;
        }
        #preview, #recorded {
            width: 100%;
            height: auto;
            max-height: 70vh;
            object-fit: contain;
        }
    </style>
</head>
<body class="bg-gray-100 min-h-screen flex">
    <Sidebar />
    
    <main class="flex-grow bg-white ml-64 p-8">
        <Header title={title} />
        
        <div class="mt-8">
            <slot />
            
            <div class="flex justify-between items-start space-x-8">
                <div class="flex-grow space-y-4 flex flex-col items-center">
                    <div class="relative w-full">
                        <video id="preview" autoplay muted class="border border-gray-300 rounded-lg"></video>
                        <div id="recordingIndicator" class="recording-indicator">Recording</div>
                    </div>
                    <div id="timerDisplay" class="text-lg font-bold">00:00</div>
                    <div class="space-x-2">
                        <button id="startRecord" class="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded">Start Recording</button>
                        <button id="stopRecord" class="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded" disabled>Stop Recording</button>
                    </div>
                    <video id="recorded" controls class="border border-gray-300 rounded-lg"></video>
                    <button id="playLastRecording" class="bg-green-500 hover:bg-green-600 text-white font-bold py-2 px-4 rounded">Play Last Recording</button>
                </div>
                <div class="flex-shrink-0">
                    <div class="speech-bubble">
                        <p class="text-lg">What is your greatest strength?</p>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <script>
        let mediaRecorder;
        let recordedChunks = [];
        let startTime;
        let elapsedTime = 0;
        let timerInterval;

        const startRecordButton = document.getElementById('startRecord');
        const stopRecordButton = document.getElementById('stopRecord');
        const previewVideo = document.getElementById('preview');
        const recordedVideo = document.getElementById('recorded');
        const playLastRecordingButton = document.getElementById('playLastRecording');
        const recordingIndicator = document.getElementById('recordingIndicator');
        const timerDisplay = document.getElementById('timerDisplay');

        startRecordButton.addEventListener('click', startRecording);
        stopRecordButton.addEventListener('click', stopRecording);
        playLastRecordingButton.addEventListener('click', playLastRecording);

        // IndexedDB setup
        let db;
        const dbName = 'VideoRecordingsDB';
        const dbVersion = 1;
        const storeName = 'recordings';

        const request = indexedDB.open(dbName, dbVersion);

        request.onerror = (event) => {
            console.error("IndexedDB error:", event.target.error);
        };

        request.onsuccess = (event) => {
            db = event.target.result;
            console.log("IndexedDB opened successfully");
        };

        request.onupgradeneeded = (event) => {
            db = event.target.result;
            const objectStore = db.createObjectStore(storeName, { keyPath: "id", autoIncrement: true });
            console.log("Object store created");
        };

        // Start video preview as soon as the page loads
        initializeVideoPreview();

        async function initializeVideoPreview() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
                previewVideo.srcObject = stream;
            } catch (error) {
                console.error("Error accessing camera:", error);
                alert("Failed to access camera. Please ensure you've granted the necessary permissions.");
            }
        }

        function showRecordingIndicator() {
            recordingIndicator.style.display = 'block';
        }

        function hideRecordingIndicator() {
            recordingIndicator.style.display = 'none';
        }

        function startTimer() {
            startTime = Date.now() - elapsedTime;
            timerInterval = setInterval(() => {
                elapsedTime = Date.now() - startTime;
                timerDisplay.innerHTML = timeToString(elapsedTime);
            }, 1000);
        }

        function stopTimer() {
            clearInterval(timerInterval);
        }

        function timeToString(time) {
            const diffInMin = time / 60000;
            const mm = Math.floor(diffInMin);
            const diffInSec = (diffInMin - mm) * 60;
            const ss = Math.floor(diffInSec);

            const formattedMM = mm.toString().padStart(2, '0');
            const formattedSS = ss.toString().padStart(2, '0');

            return `${formattedMM}:${formattedSS}`;
        }

        async function startRecording() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });
                previewVideo.srcObject = stream;
                
                mediaRecorder = new MediaRecorder(stream);
                
                mediaRecorder.ondataavailable = (event) => {
                    if (event.data.size > 0) {
                        recordedChunks.push(event.data);
                    }
                };
                
                mediaRecorder.start();
                startRecordButton.disabled = true;
                stopRecordButton.disabled = false;
                
                showRecordingIndicator();
                startTimer();
            } catch (error) {
                console.error("Error accessing media devices:", error);
                alert("Failed to access camera and microphone. Please ensure you've granted the necessary permissions.");
            }
        }

        function stopRecording() {
            mediaRecorder.stop();
            startRecordButton.disabled = false;
            stopRecordButton.disabled = true;
            
            hideRecordingIndicator();
            stopTimer();
            
            mediaRecorder.onstop = () => {
                const blob = new Blob(recordedChunks, { type: 'video/webm' });
                saveRecordingToIndexedDB(blob);
                recordedChunks = [];
                
                // Navigate to the results page after saving the recording
                window.location.href = '/results';
            };
        }   

        function saveRecordingToIndexedDB(blob) {
            const transaction = db.transaction([storeName], 'readwrite');
            const objectStore = transaction.objectStore(storeName);
            const request = objectStore.add({ video: blob, timestamp: new Date().toISOString() });

            request.onsuccess = () => {
                console.log("Recording saved to IndexedDB");
            };

            request.onerror = (event) => {
                console.error("Error saving recording to IndexedDB:", event.target.error);
            };
        }

        async function playLastRecording() {
            const transaction = db.transaction([storeName], 'readonly');
            const objectStore = transaction.objectStore(storeName);
            const request = objectStore.openCursor(null, 'prev');

            request.onsuccess = (event) => {
                const cursor = event.target.result;
                if (cursor) {
                    const blob = cursor.value.video;
                    recordedVideo.src = URL.createObjectURL(blob);
                    recordedVideo.play();
                } else {
                    console.log("No recordings found");
                }
            };

            request.onerror = (event) => {
                console.error("Error retrieving recording from IndexedDB:", event.target.error);
            };
        }
    </script>
</body>
</html>